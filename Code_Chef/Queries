Queries:

1. Write a query to output the table 'Users'. Limit your results to 5 rows.
    select * from users 
    limit 5;

2. Write a query to find average rating among all users. Rename that column as average_rating
    select avg(rating) as average_rating
    from users;

3. Write a query to find out the count of users having age between 18 and 24 (inclusive). Rename that column as user_count
    select count(user_name)  as user_count 
    from users 
    where age between 18 and 24;

4. Find users with maximum rating - Output the user_name of top 2 users with maximum ratings
    select user_name, rating 
    from users
    order by rating desc limit 2;

5. Write a query to find out the percentage of users having >= 2200 rating ( rounded to 2 decimal places ) , rename that column as percentage
    select round( count(*) * 100.0 / (select count(*) from users), 2) as percentage
    from 
    users
    where rating >=2200;
6. Write a query to calculate the sum of rating for users with pro subscription ( rename that column as pro_peoples );
    select sum(rating) as pro_peoples
    from users
    where pro_plan = 1;

7. Write a query to print the team name ( as team_name ) along with count of users ( rename that column as user_count ) in that team. Only print the rows with non-zero number of team members.
   Order it by team_name in ascending order
    select T.name as team_name, count(U.user_name) as user_count
    from teams T
    left join 
    users U
    on T.team_id = U.team_id
    group by T.name
    having count(U.user_name) > 0
    order by team_name asc;

8. Write a query to find out the user_name of user with highest rating grouped by college. If a college has multiple users with same max rating then print all of them
    select college, user_name from users 
    where (college, rating) in (
    select college, max(rating) from users
    group by college);

 9. Write a query to display the name of each college ( NOT NULL Values only ) along with the count of users from that college (rename it as "user_count"), and sort the result based on the "user_count" in ascending order.
    select college, count(user_name) as user_count
    from users
    where college is not null
    group by college
    order by user_count asc;

10. Find the team(s) with the highest average rating among all teams and the corresponding number of users in that team.
    select  t. name as team_name, count(user_name) as user_count,
    round(avg(rating ), 2) as highest_avg_rating 
    from users u 
    join  teams t
    on t.team_id = u.team_id
    group by t.team_id, t.name
    having avg(u.rating) = 
    (select max(avg_rating)
    from
    (select avg(rating) as avg_rating
    from users 
    group by team_id
    ) as subquery
    );

